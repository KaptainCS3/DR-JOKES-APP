import React from "react";
import Reaction from "./Reaction";
import JokeContainer from "./JokeContainer";
import ChevronLeft from "./ChevronLeft";
import RandomJokeBtn from "./RandomJokeBtn";
import ChevronRight from "./ChevronRight";
import CommentForm from "./CommentForm";
import CommentList from "./CommentList";
const Jokes = (props) => {
  const joke = props.fetchData.map((jokes) => {
    return jokes.id;
  });
  const APIComment = `https://api.jokes.digitalrenter.com/api/comments`;
  const submitJokeComment = async (event) => {
    event.preventDefault();
    const response = await fetch(APIComment, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify({
        joke_id: joke,
        // comment: comment.comment,
      }),
    });
    if (!response.ok) {
      throw new Error(response.error);
    } else {
      const data = await response.json();
      console.log(data);

      alert("Comment successfully Added ðŸ˜ŽðŸ˜„ðŸ˜…ðŸ˜Ž");
      // setComment({
      //   comment: "",
      // });
    }
  };
  const object = props.fetchData.map((el) => {
    return (
      <JokeContainer key={el.id} punchline={el.punchline} setup={el.setup} />
    );
  });
  // console.log(object.length);
  //! The review is same as a carousel you know in css and normal js

  //! This function helps us check and make sure we don't go above the length of our array and below its length
  const checkNumber = (number) => {
    if (number > object.length - 1) {
      return 0;
    }
    if (number < 0) return object.length - 1;
    return number;
  };

  //! This function help us in moving to the previous Joke element
  const prevJoke = () => {
    return props.setCatIndex((curr) =>
      curr === 0 ? object.length - 1 : curr - 1
    );
  };

  //! This function help us in moving to the next Joke element
  const nextJoke = () => {
    return props.setCatIndex((curr) =>
      curr === object.length - 1 ? 0 : curr + 1
    );
  };

  //! return random Joke Index
  const randomJoke = () => {
    let randomIndex = Math.floor(Math.random() * object.length);
    if (randomIndex === props.catIndex) {
      randomIndex = props.catIndex + 1;
    }
    props.setCatIndex(checkNumber(randomIndex));
  };

  const comments = props.fetchData.map((el) => el.comments);
  return (
    <div
      className={`flex justify-between items-center my-8 mx-auto flex-col px-8 md:hidden lg:hidden`}
    >
      {/* //! position overflow on rendering filter category */}
      <div className="w-full">
        <div className="flex transition-transform ease-out duration-500">
          {object[props.catIndex]}
        </div>
      </div>
      <div className={`flex justify-between w-full mx-auto mt-4`}>
        <ChevronLeft prevJoke={prevJoke} />
        <RandomJokeBtn randomJoke={randomJoke} />
        <ChevronRight nextJoke={nextJoke} />
      </div>
      <Reaction
        like={props.like}
        disLike={props.disLike}
        thumbsDown={props.thumbsDown}
        thumbsUp={props.thumbsUp}
        // numComments={props.numComments}
        toggleComment={props.toggleComment}
      />
      <CommentForm
        handleChangeComment={props.handleChangeComment}
        comment={props.comment}
        // submitJokeComment={props.submitJokeComment}
        submitJokeComment={submitJokeComment}
      />
      <div className="w-full" style={props.show}>
        {/* {props.jokeComment  */}
        {/* ?  */}
        <CommentList comments={comments} />
        {/* : ""} */}
      </div>
    </div>
  );
};
export default Jokes;




import React, { useState, useEffect, useRef } from "react";
import { motion } from "framer-motion";
import style from "../styles/container.module.css";
import JokeContainer from "./JokeContainer";
import JokesContainer from "./JokesContainer";
import Modal from "./Modal";
const JokeSlider = (props) => {
  const APIComment = `https://api.jokes.digitalrenter.com/api/comments`;
  const joke = props.fetchData.map((jokes) => {
    return jokes.id;
  });
  const submitJokeComment = async (event) => {
    event.preventDefault();
    const response = await fetch(APIComment, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify({
        joke_id: joke,
        // comment: comment.comment,
      }),
    });
    if (!response.ok) {
      throw new Error(response.error);
    } else {
      const data = await response.json();
      console.log(data);

      alert("Comment successfully Added ðŸ˜ŽðŸ˜„ðŸ˜…ðŸ˜Ž");
      // setComment({
      //   comment: "",
      // });
    }
  };

  const commentList = props.fetchData.map((el) => el.comments);
  const showCommentList = () => {
    props.setShowComment(!props.showComment);
  };
  const toggle = () => {
    props.setShowModal(true);
  };
  const [width, setWidth] = useState(0);
  const carousel = useRef();

  const object = props.fetchData.map((el) => {
    return (
      <JokeContainer
        punchline={el.punchline}
        setup={el.setup}
        toggle={toggle}
        key={el.id}
      />
    );
  });
  const objectModal = props.fetchData.map((el) => {
    return (
      <JokesContainer
        punchline={el.punchline}
        setup={el.setup}
        toggle={toggle}
        key={el.id}
      />
    );
  });

  useEffect(() => {
    setTimeout(() => {
      setWidth(carousel.current.scrollWidth - carousel.current.offsetWidth);
    }, 3000);
  }, []);
  return (
    <div className="sm:hidden">
      <motion.div
        className="flex w-full cursor-grab min-h[500px] overflow-hidden"
        ref={carousel}
      >
        <motion.div
          className={style.inner__carousel}
          drag="x"
          dragConstraints={{ right: 0, left: -width }}
        >
          <motion.div
            className={`flex flex-row justify-between w-full`}
            style={{ paddingLeft: "1%" }}
          >
            {object}
            <Modal
              showModal={props.showModal}
              setShowModal={props.setShowModal}
              showComment={props.showComment}
              objectModal={objectModal}
              catIndex={props.catIndex}
              setCatIndex={props.setCatIndex}
              like={props.like}
              disLike={props.disLike}
              thumbsDown={props.thumbsDown}
              thumbsUp={props.thumbsUp}
              // jokeComment={props.jokeComment}
              commentList={commentList}
              showCommentList={showCommentList}
              numComments={props.numComments}
              comment={props.comment}
              handleChangeComment={props.handleChangeComment}
              submitJokeComment={props.submitJokeComment}
              toggleComment={props.toggleComment}
              show={props.show}
            />
            {/* flex justify-center items-center w-64 h-64 my-16 rounded-xl shadow-2xl flex-col mr-4 */}
          </motion.div>
        </motion.div>
      </motion.div>
    </div>
  );
};

export default JokeSlider;



import React, { useState, useEffect } from "react";
import Nav from "./components/Nav";
import "./App.css";
import Welcome from "./components/Welcome";
import Jokes from "./components/Jokes";
import CreateJoke from "./components/CreateJoke";
import CreateJokes from "./components/CreateJokes";
import Footer from "./components/Footer";
import { DarkModeSwitch } from "react-toggle-dark-mode";
import useDarkMode from "./hooks/useDarkMode";
import JokeSlider from "./components/JokeSlider";
import catValue from "./categoryValue";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faQuestion } from "@fortawesome/free-solid-svg-icons";
import Comment from "./components/Comment";
import Jump from "react-reveal/Jump";
const App = () => {
  //!Add comment state
  const [comment, setComment] = useState({
    comment: "",
  });

  let joke_id;

  const [showComment, setShowComment] = useState(true);
  const toggleComment = () => {
    setShowComment(!showComment);
  };

  //!Show modal state
  const [showModal, setShowModal] = useState(false);

  // !Nav display state
  const [isNavBar, setIsNavBar] = useState(false);

  //! Theme color State
  const [colorTheme, setColorTheme] = useDarkMode();

  //!Dark mode state
  const [isDarkMode, setDarkMode] = useState(
    colorTheme === "light" ? true : false
  );

  //!Display create joke
  const [displayCreateJoke, setDisplayCreateJoke] = useState(false);
  const handleClick = () => {
    setDisplayCreateJoke(true);
  };
  const closeCreateJoke = () => {
    setDisplayCreateJoke(false);
  };

  //! category index state
  const [catIndex, setCatIndex] = useState(0);

  //!track input create form
  //! select joke category state
  const [createJokeCategory, setCreateJokeCategory] = useState(1);

  //! form data input joke
  const [createJokeData, setCreateJokeData] = useState({
    punchline: "",
    setup: "",
    author_name: "",
    author_email: "",
    category_id: createJokeCategory,
  });

  //!selected category state for rendering component
  const [selectCategory, setSelectCategory] = useState(1);

  //!response state data
  const [fetchData, setFetchData] = useState([]);
  // const [commentList, setCommentList] = useState([]);
  //!like and dislike joke state
  const [like, setLike] = useState(false);
  const [disLike, setDisLike] = useState(false);
  const thumbsUp = () => {
    setLike(!like);
    setDisLike(false);
  };
  const thumbsDown = () => {
    setDisLike(!disLike);
    setLike(false);
  };

  //! Dark mode handler
  const toggleDarkMode = (checked) => {
    setColorTheme(colorTheme);
    setDarkMode(checked);
  };

  const createJokeHandleChange = (event) => {
    const { name, value } = event.target;
    setCreateJokeData((prevCreateJokeData) => {
      return {
        ...prevCreateJokeData,
        [name]: value,
      };
    });
  };

  //! prevent page reload
  const handleCreateDataChange = (e) => {
    setCreateJokeCategory(e.target.value);
  };

  //!useEffect prevent component re-Render
  useEffect(() => {
    fetchJokes();
  }, []);

  //!API link
  const API = `https://api.jokes.digitalrenter.com/api/jokes`;
  // const APIComment = `https://api.jokes.digitalrenter.com/api/comments`;
  //! fetch data from API
  const fetchJokes = async () => {
    const response = await fetch(API);
    if (!response.ok) {
      throw new Error(response.error);
    } else {
      const data = await response.json();
      setFetchData(data);
    }
  };
  //! post date to API
  const submitJokeData = async (event) => {
    event.preventDefault();
    const response = await fetch(API, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify({
        punchline: createJokeData.punchline,
        setup: createJokeData.setup,
        author_name: createJokeData.author_name,
        author_email: createJokeData.author_email,
        category_id: createJokeData.category_id,
      }),
    });
    if (!response.ok) {
      throw new Error(response.error);
    } else {
      const data = await response.json();
      console.log(data, response);
      alert("Joke successfully Added ðŸ˜ŽðŸ˜„ðŸ˜…ðŸ˜Ž");
      setCreateJokeData({
        punchline: "",
        setup: "",
        author_name: "",
        author_email: "",
        category_id: createJokeCategory,
      });
    }
  };

  const handleChangeComment = (event) => {
    const { name, value } = event.target;
    setComment((prevComment) => {
      return {
        ...prevComment,
        [name]: value,
      };
    });
  };

  const allJokes = fetchData.filter((el) => el.category_id === selectCategory);

  joke_id = catIndex + 1;
  // const submitJokeComment = async (event) => {
  //   event.preventDefault();
  //   const response = await fetch(APIComment, {
  //     method: "POST",
  //     headers: {
  //       "Content-Type": "application/json",
  //       Accept: "application/json",
  //     },
  //     body: JSON.stringify({
  //       joke_id: joke_id,
  //       comment: comment.comment,
  //     }),
  //   });
  //   if (!response.ok) {
  //     throw new Error(response.error);
  //   } else {
  //     const data = await response.json();
  //     console.log(data);

  //     alert("Comment successfully Added ðŸ˜ŽðŸ˜„ðŸ˜…ðŸ˜Ž");
  //     setComment({
  //       comment: "",
  //     });
  //   }
  // };

  let numComments;
  // const jokeCommentNum = allJokes.map((el) => {
  //   if (el.comments.length !== 0) {
  //     if (catIndex === el.id - 1) {
  //       if (numComments === "undefined") return (numComments = 0);
  //       else numComments = el.comments.length;
  //     } else {
  //       return console.log("No comments found");
  //     }
  //   }
  // });

  // console.log(allJokes);f
  // const jokeComment = fetchData.map((el) => {
  //   if (el.comments.length !== 0) {
  //     return el.comments.map((cmt) => {
  //       if (cmt.joke_id === selectCategory) {
  //         // console.log(cmt);
  //         return <Comment comment={cmt.comment} useName={cmt.commenter.name} />;
  //       } else {
  //         return null;
  //       }
  //     });
  //   }
  // });
  const onNewCommentReceived = (newComment) => {
    console.log("Data sent is ", newComment);

    const updatedJokes = allJokes.map((joke) => {
      if (joke.id === newComment.joke_id) {
        joke.comments = [newComment, ...joke.comments];
      }
      return joke;
    });

    setFetchData(updatedJokes);
  };

  const show = {
    display: `${showComment ? "none" : ""}`,
  };

  return (
    <div className="w-full lg:flex min-h-[100vh]">
      {fetchData.length === 0 ? (
        <h1 className="w-full font-bold text-2xl flex justify-center items-center text-center h-[90vh]">
          Wait a moment Joke Loading.........
        </h1>
      ) : (
        <>
          <Nav
            colorTheme={colorTheme}
            setColorTheme={setColorTheme}
            isDarkMode={isDarkMode}
            setDarkMode={setColorTheme}
            toggleDarkMode={toggleDarkMode}
            selectCategory={selectCategory}
            setSelectCategory={setSelectCategory}
            handleClick={handleClick}
            displayCreateJoke={displayCreateJoke}
            setDisplayCreateJoke={setDisplayCreateJoke}
            isNavBar={isNavBar}
            setIsNavBar={setIsNavBar}
          />
          <main className="dark:bg-[#121212] lg:w-4/5">
            <div className="lg:flex justify-between items-center h-16 px-4">
              <Welcome selectCategory={selectCategory} />
              <div className="flex items-center sm:hidden md:hidden">
                {/* toggle dark mode */}
                <span className="pr-4 font-bold text-xl dark:text-white">
                  {isDarkMode ? "Light" : "Dark"}
                </span>
                <Jump>
                  <DarkModeSwitch
                    // className="sm:hidden md:hidden"
                    size={35}
                    checked={isDarkMode}
                    onChange={toggleDarkMode}
                  />
                </Jump>
              </div>
            </div>
            {/* //! Main Mobile component */}
            <Jokes
              selectCategory={selectCategory}
              catIndex={catIndex}
              setCatIndex={setCatIndex}
              fetchData={allJokes}
              like={like} //like function
              disLike={disLike} //dislike function
              thumbsDown={thumbsDown}
              thumbsUp={thumbsUp}
              // jokeComment={jokeComment}
              showComment={showComment}
              setShowComment={setShowComment}
              // numComments={numComments} //number of comment for joke
              // comment={comment} //comment content
              handleChangeComment={handleChangeComment}
              // submitJokeComment={submitJokeComment}
              toggleComment={toggleComment} // toggle comment show/hide
              show={show}
              onNewComment={(newComment) => onNewCommentReceived(newComment)}
            />
            <CreateJoke
              createJokeCategory={createJokeCategory}
              createJokeData={createJokeData}
              createJokeHandleChange={createJokeHandleChange}
              handleCreateDataChange={handleCreateDataChange}
              displayCreateJoke={displayCreateJoke}
              setDisplayCreateJoke={setDisplayCreateJoke}
              handleClick={handleClick}
              submitJokeData={submitJokeData}
              closeCreateJoke={closeCreateJoke}
            />
            {/* //!Joke component from Tablet and Desktop */}
            <div>
              <CreateJokes
                createJokeCategory={createJokeCategory}
                createJokeData={createJokeData}
                createJokeHandleChange={createJokeHandleChange}
                handleCreateDataChange={handleCreateDataChange}
                displayCreateJoke={displayCreateJoke}
                setDisplayCreateJoke={setDisplayCreateJoke}
                handleClick={handleClick}
                submitJokeData={submitJokeData}
                closeCreateJoke={closeCreateJoke}
                show={show}
              />
              {/* <JokeSlider
                selectCategory={selectCategory}
                catValue={catValue}
                catIndex={catIndex}
                setCatIndex={setCatIndex}
                showModal={showModal}
                setShowModal={setShowModal}
                fetchData={allJokes}
                like={like}
                disLike={disLike}
                thumbsDown={thumbsDown}
                thumbsUp={thumbsUp}
                // jokeComment={jokeComment}
                showComment={showComment}
                // numComments={numComments}
                // comment={comment}
                handleChangeComment={handleChangeComment}
                // submitJokeComment={submitJokeComment}
                toggleComment={toggleComment} // toggle comment show/hide
                show={show}
              /> */}
              {/* <h1>Random Joke of the day</h1> */}
              {/* <JokeSlider
                selectCategory={selectCategory}
                catValue={catValue}
                catIndex={catIndex}
                setCatIndex={setCatIndex}
                showModal={showModal}
                setShowModal={setShowModal}
                fetchData={allJokes}
                like={like}
                disLike={disLike}
                thumbsDown={thumbsDown}
                thumbsUp={thumbsUp}
                // jokeComment={jokeComment}
                showComment={showComment}
                setShowComment={setShowComment}
                // numComments={numComments}
                // comment={comment}
                handleChangeComment={handleChangeComment}
                // submitJokeComment={submitJokeComment}
                toggleComment={toggleComment} // toggle comment show/hide
              /> */}
            </div>
            {/* //!Desktop help component */}
            <div className="w-full flex justify-end pr-4 pt-2 sm:hidden md:hidden">
              <div className="bg-black w-16 h-16 rounded-full text-white flex justify-center items-center text-4xl dark:text-white border-2">
                <FontAwesomeIcon icon={faQuestion} />
              </div>
            </div>
          </main>
          {/*//! footer Desktop and Tablet  */}
          <Footer />
        </>
      )}
    </div>
  );
};

export default App;
